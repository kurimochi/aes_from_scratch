use aes_gcm::{encrypt_gcm, decrypt_gcm};

#[test]
fn manipulation_detect() {
    // base: test case 3
    let k = vec![
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
    ];
    let p = [
        0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55,
    ];
    let a: [u8; 0] = [];
    let iv = [
        0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88,
    ];

    let (c, t) = encrypt_gcm(&p, &a, &k, &iv);
    // Manipulate the ciphertext
    let mut c_manipulated = c.clone();
    c_manipulated[0] ^= 0x01; // Flip the first bit of the ciphertext

    // Attempt to decrypt the manipulated ciphertext
    let result = decrypt_gcm(&c_manipulated, &a, &k, &iv, t);
    // The decryption should fail, returning an error
    assert!(result.is_err(), "Decryption should fail due to manipulation");
}